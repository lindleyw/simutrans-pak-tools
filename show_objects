#!/usr/bin/env perl

#
# show_objects.pl
#   by William Lindley, wlindley@wlindley.com
#   
#   Copyright (c) 2009-2021 and released under the GNU General Public
#   License version 2.0
#   
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 2 of the License.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
# 02110-1301, USA.
#
# DESCRIPTION:
#
# Displays a variety of reports about the objects in the Simutrans pak.
#
# For each commodity
#   Scan through the range of years
#      Print a flow diagram of industries that involve the commodity
#
# Vehicle performance statistics
# 
# Vehicle timeline consistency check

#
# [-t translation_directory]   Use translation file; e.g., path to directory containing *.tab (optional when primary parameter specifies a directory)
# [-l language]  e.g., 'en' for English.  Default is environment's LANG or LANGUAGE
# pak_source     Single file, or a directory (will recursively process all *.dat files within it)
#
use v5.32;
use strict;
use warnings;
use feature qw(signatures);
no warnings qw(experimental::signatures);

our $VERSION = '0.03';

use FindBin;
use lib "$FindBin::Bin/lib";

use Getopt::Std;
getopts('t:r:l:v');
# use Data::Dumper;

no warnings 'once';
my $verbose = $::opt_v;
my $xlat_root = $::opt_t;
my $language = $::opt_l || lc($ENV{LANGUAGE} =~ s/^(\w{2}).*\z/$1/r ) // 'en';  # Default language from environment
use warnings 'once';

my $lang_code;
my $lang_name;


# Conversion note
# 1 km =  0.62137119 miles

# use Data::Dumper;


use Games::Simutrans::Pakset;

my $pak = Games::Simutrans::Pakset->new(language => $language);
$pak->xlat_root($xlat_root) if defined $xlat_root;

$pak->path(shift);   # First parameter

$pak->load;
#
#
#

{

    foreach my $object_name (keys %{$pak->objects}) {
	if ($pak->object($object_name)->{_is_internal}) {
	    print "   $object_name  is an internal object\n";
	}
    }

    print '-'x70 . "\n";
}

{
    my %chronology;

    foreach my $object_name (keys %{$pak->objects}) {
	next if $pak->object($object_name)->{_is_internal};  # Ignore pakset internals
	foreach my $event (qw(intro retire)) {
            next if $pak->object($object_name)->{_is_permanent};
            my ($event_year, $event_month) = ("${event}_year", "${event}_month");
	    my $show_date = sprintf("%4d-%02d",
                                    $pak->object($object_name)->$event_year,
                                    $pak->object($object_name)->$event_month);
	    my $event_key = "${show_date}-$event-" . lc($pak->object($object_name)->{_short_name});

	    my @notes;
	    if (defined $pak->object($object_name)->{'speed'}) {
		if (! ref $pak->object($object_name)->{'speed'} ) {
		    push @notes, 'speed ' . $pak->object($object_name)->{'speed'};
		}
	    }
	    if (defined $pak->object($object_name)->{'payload'}) {
                # NOTE: If this is a hash, the keys (usually 0..4) are
                # entries, e.g., "p_class[0]" in the *.tab file; whose
                # values are the class names.
                my $text ;
                if (ref $pak->object($object_name)->{'payload'}) {
                    my @class_caps;
                    foreach my $class (keys %{$pak->object($object_name)->{'payload'}}) {
                        next unless $pak->object($object_name)->{payload}->{$class};
                        push @class_caps, $pak->object($object_name)->{payload}->{$class} . ' ' .
                        $pak->translate("p_class[$class]");
                    }
                    $text = 'capacity ' . join (', ', @class_caps) if scalar @class_caps;
                } else {
                    $text = "capacity " . $pak->object($object_name)->{'payload'} if $pak->object($object_name)->{'payload'};
                }
		push @notes, $text if defined $text;
	    }
	    if ($event eq 'retire' && ! $pak->object($object_name)->{_is_permanent}) {
		push @notes, 'introduced ' . $pak->object($object_name)->intro_year;
	    }
	    my $note = scalar @notes ? ' (' . join('; ',@notes) . ')' : '';
	    $chronology{$event_key} = sprintf("%-10s: %-10s %-10s %s",
					      $show_date,
					      $event eq 'intro' ? 'Introduce' : 'Retire',
					      $pak->object($object_name)->{'obj'},
					      $pak->translate($pak->object($object_name)->{_short_name} . $note),
		);
	}
    }

    foreach my $happening (sort keys %chronology) {
	print "$chronology{$happening}\n";
    }
}

#
#
#

my %commodity;
my $year_lower = undef;
my $year_upper = undef;

foreach my $factory_name (sort { $pak->object($a)->{_sort_key} cmp $pak->object($b)->{_sort_key} } keys %{$pak->objects}) {
    my $factory = $pak->object($factory_name);

    next unless ($factory->{'obj'} eq 'factory');

    # NOTE: Relies on filter_object() above to fill default times
    my $intro_year = $factory->intro_year * 12 + $factory->intro_month - 1;
    if (!defined($year_lower) || $intro_year < $year_lower) {
	$year_lower = $intro_year;
    }
    my $retire_year = $factory->retire_year * 12 + $factory->retire_month - 1;
    if (!defined($year_upper) || $retire_year > $year_upper) {
	$year_upper = $retire_year;
    }

    foreach my $direction ('input', 'output') {
	next unless defined $factory->{$direction.'good'};
	my %good = %{$factory->{$direction.'good'}};
	while (my ($commodity_key, $commodity_name) = each (%good)) {
	    my $commodity_level = $factory->{'inputcapacity'}{$commodity_key};
	    # print "$commodity_name $commodity_level\n";
	    
	    for my $year ($intro_year .. $retire_year) {
		push @{$commodity{lc($commodity_name)}{$year}{$direction}}, \$factory;
	    }
	}
    }

}

my %commodity_overview;

foreach my $commodity_name (sort { $pak->translate($::a) cmp $pak->translate($::b) } keys %commodity) {
    my $this_commodity = \%{$commodity{$commodity_name}};

    my %goods_flow;
    foreach my $year ($year_lower .. $year_upper) {
	if (defined $commodity{$commodity_name}{$year}) {
	    foreach my $direction ('input', 'output') {
		foreach my $factory (@{$commodity{$commodity_name}{$year}{$direction}}) {
		    push @{$goods_flow{$year}{$direction}}, $$factory->{'name'};
		    # print "COMMODITY: $commodity_name $year $direction $$factory->{'name'}\n";
		}
	    }
	}
    }
    $commodity_name = $pak->translate($commodity_name);
    print "\n### $commodity_name ###\n";
    my $none = '(none)';
    my ($last_inputs, $last_outputs) = ($none, $none);

    foreach my $year (sort {$a <=> $b} keys %goods_flow) {

	my ($inputs, $outputs) = ($none, $none);

	if (defined $goods_flow{$year}{'input'}) {
	    $inputs = join(',', @{$goods_flow{$year}{'input'}});
	    foreach my $c (@{$goods_flow{$year}{'input'}}) {
		$c =~ s/\d+//;
		$commodity_overview{$commodity_name}{'input'}{$c} = 1;
	    }
	}
	if (defined $goods_flow{$year}{'output'}) {
	    $outputs = join(',', @{$goods_flow{$year}{'output'}});
	    foreach my $c (@{$goods_flow{$year}{'output'}}) {
		$c =~ s/\d+//;
		$commodity_overview{$commodity_name}{'output'}{$c} = 1;
	    }
	}
	if ($outputs ne $last_outputs || $inputs ne $last_inputs) {
	    my $print_year = int($year/12) . "-" . (($year % 12) + 1);
	    print " $print_year: $outputs --> $inputs\n";
	    $last_outputs = $outputs;
	    $last_inputs = $inputs;
	}
    }
}


#print Dumper(%commodity_overview);

foreach my $c (sort { $pak->translate($::a) cmp $pak->translate($::b) } keys %commodity_overview) {
    print $pak->translate($c);
    print ': ' .
	join(',',sort map { $pak->translate($_) } keys %{$commodity_overview{$c}{'output'}}) . ' -> ',
	join(',',sort map { $pak->translate($_) } keys %{$commodity_overview{$c}{'input'}}) . "\n";
}


################################################################

my %factory_overview;

foreach my $c (sort { $pak->translate($::a) cmp $pak->translate($::b) } keys %commodity_overview) {
    foreach my $out_werk (keys %{$commodity_overview{$c}{'output'}}) {
	$factory_overview{$pak->translate($out_werk)}{$pak->translate($c)} = 'out';
    }
    foreach my $in_werk (keys %{$commodity_overview{$c}{'input'}}) {
	$factory_overview{$pak->translate($in_werk)}{$pak->translate($c)} = 'in';
    }
}

if (scalar keys %factory_overview) {

    print "[table]\n";
    print "[tr][td][b]Industry[/b][/td][td][b]Requires[/b][/td][td][b]Produces[/b][/td][/tr]\n";
    foreach my $werk (sort keys %factory_overview) {
	my @in_goods = grep {$factory_overview{$werk}{$_} eq 'in'} keys %{$factory_overview{$werk}};
	my @out_goods = grep {$factory_overview{$werk}{$_} eq 'out'} keys %{$factory_overview{$werk}};
	print '[tr][td]' . $pak->translate($werk) . ": [/td][td]";
	if (scalar @in_goods) {
	    #print "   accepts: " . join (',', @in_goods) . "\n";
	    print join (', ', map { $pak->translate($_) } @in_goods) . "\n";
	}
	print "[/td][td]";
	if (scalar @out_goods) {
	    #print "   produces: " . join (',', @out_goods) . "\n";
	    print join (', ', map { $pak->translate($_) } @out_goods) . "\n";
	}
	print "[/td][/tr]\n";
    }
    print "[/table]\n";

    # print Dumper(%factory_overview);
}

################################################################
#
# Show trains (actually all vehicles: buses, ships,...)
#


{
    my $header_shown = 0;

    foreach my $train_name (sort { $pak->object($a)->{_sort_key} cmp $pak->object($b)->{_sort_key} }
                            keys %{$pak->objects}) {
	my $train = $pak->object($train_name);

	next unless ($train->{'obj'} eq 'vehicle');
	if (!$header_shown++) {
	    print "Rolling Stock Table.\n";
	    print "Availability--- -Power- -Type-    ---Name-------------------   -Wght- Capy -Speed-\n";
	}

	printf("%4d.%02d-%4d.%02d %-8s %-8s %-30s %3dT %12s %3dkm/h\n",
	       $train->intro_year, $train->intro_month, 
	       $train->retire_year, $train->retire_month,
	       $train->{'engine_type'} // '--', $train->waytype_text,
	       $pak->translate($train->{_short_name}), $train->{'weight'} // 0,
	       $train->payload_text, $train->{'speed'} // 0
	    );
    }
}

{
    my $header_shown = 0;

    foreach my $train_name (sort {
	$pak->object($a)->{_sort_key} cmp $pak->object($b)->{_sort_key} } keys %{$pak->objects}) {

	my $train = $pak->object($train_name);

	next unless ($train->{'obj'} eq 'vehicle');
	next unless ($train->{'power'});

	if (!$header_shown++) {
	    print "\n\n";
	    print "Cost / Performance Table.\n";
	}

	printf("%4d-%02d,%4d-%02d,%-40s,%3d, %5d, %5d, %5d\n",
	       $train->intro_year, $train->intro_month, 
	       $train->retire_year, $train->retire_month,
	       $pak->translate($train->{_short_name}) . '(' . $train->waytype_text . ')',
	       $train->{'weight'} // 0,
	       $train->{'power'} // 0,
	       $train->{'tractive_effort'} // 0, 
	       $train->{'speed'} // 0,
	    );
    }
}

# Process by sort-key, which should be in order of introduction

print "\n\nTimeline consistency check\n==========================\n\n";

sub has_constraint ($object_key, $type, $desired) {
    # Verifies that the object has a constraint of the named type with the desired value
    my $obj = $pak->object($object_key);
    return unless defined $obj;
    my $constraints = Mojo::Collection->new(values %{$obj->{constraint}{$type}});
    return 1 if $constraints->size == 0; # unconstrained
    return ($constraints->first(sub { $_ eq $desired || $_ eq 'any' || $_ eq 'none' } )); # as desired, 'any', or 'none'
}

sub yyyymm ($month) {
    return defined $month ? sprintf("%04d-%02d", ($month / 12), (($month % 12) +1)) : '';
}

foreach my $train_name (sort {
    $pak->object($a)->{_sort_key} cmp $pak->object($b)->{_sort_key} } keys %{$pak->objects}) {

    my $train = $pak->object($train_name);

    next unless ($train->{'obj'} eq 'vehicle');

    my @constraints = qw(next prev);

    my @events;
    my %vehicle_event;

    my $problems;

    if (exists $train->{constraint}) {

	foreach my $c (0..1) {
	    my ($from, $to) = ($constraints[$c], $constraints[1 - $c]);
	    if (! has_constraint($train_name, $from, 'none')) {
		foreach my $from_obj (values %{$train->{constraint}{$from}}) {
		    next if lc($from_obj) eq 'none';

		    unless (defined $pak->object($from_obj)) {
                        my $missing =
                        "$from_obj is not defined; it is required as a constraint of $train_name.\n";
			push @{$problems->{undefined}}, $missing;
                        push @{$problems->{vehicle}->{$train_name}}, $missing;
		    }
                    unless (has_constraint($from_obj, $to, $train_name)) {
                        my $missing = "$train_name has $from of $from_obj, " .
                        "but $from_obj does not have $to of $train_name.\n";
                        push @{$problems->{"missing_$to"}}, $missing;
                        push @{$problems->{vehicle}->{$train_name}}, $missing;
                        push @{$problems->{vehicle}->{$from_obj}}, $missing;
                    }

		    foreach my $event (qw[intro retire]) {
                        next unless defined $pak->object($from_obj);
			push @events, $pak->object($from_obj)->$event;
			push @{$vehicle_event{$event}{$pak->object($from_obj)->$event}}, $from_obj;
		    }

		}
	    }
	}

	# Replay vehicle-set timeline
	push @events, $train->intro, $train->retire;
	my $events = Mojo::Collection->new(@events)->sort(sub {$a <=> $b})->uniq;

	my $unbuildable_text;

	if (defined $vehicle_event{retire} && scalar %{$vehicle_event{retire}}) {
	    # Only if at least one of our dependencies retires
	    my %available;
	    my $in_service = 0;
	    my $unbuildable = 0;
	    my $rebuildable = '';

            foreach my $event (@{$events}) {
		foreach my $equip (@{$vehicle_event{intro}{$event}}) {
		    $available{$equip} = 1;
		    if ($unbuildable) {
			print sprintf("${unbuildable_text} until %s, when $equip becomes available${rebuildable}.\n", 
				      yyyymm($event));
			$unbuildable = 0;
			$rebuildable = '';
		    }
		}
		foreach my $equip (@{$vehicle_event{retire}{$event}}) {
		    $available{$equip} = 0;
		}
		if ($event == $train->intro) {
		    # introducing ourselves
		    $in_service = 1;
		}
		if ($event == $train->retire) {
		    if ($unbuildable) {
			print sprintf("${unbuildable_text} until %s when it retires.\n", yyyymm($event));
		    }
		    last;
		}
		if ($in_service) {
		    if (! grep {$_} (values %available)) {
                        ; $DB::single = 1 unless defined $train->intro;
			if ($event == $train->intro) {
			    $unbuildable_text = sprintf("In %s, ", yyyymm($event)) . ' ' .
			      $train->{name} . ' is introduced, is unbuildable because none of its constraints are available';
			    $rebuildable = '';
			} else {
			    $unbuildable_text = sprintf("In %s, vehicles(", yyyymm($event)) . 
			      join (', ', @{$vehicle_event{retire}{$event}}) .
				') retire... rendering ' . $train->name . ' unbuildable';
			    $rebuildable = ', making ' . $train->name . ' buildable again';
			}
			$unbuildable = 1;
		    }
		}
	    }
	}

    }
}

#######################################

my @liveries_by_intro = sort {$pak->liveries->{$a}->intro <=> $pak->liveries->{$b}->intro} keys %{$pak->liveries} ;

print "\n\n----------------\n\nLIVERIES:\n\n";

foreach my $l (@liveries_by_intro) {
    my $waytypes = Mojo::Collection->new;
    $pak->liveries->{$l}->objects->each( sub { push @{$waytypes}, $pak->object($_)->waytype_text } );
    my $ways = '';
    if (scalar @{$waytypes}) {
        $ways = '(' . join(', ', @{$waytypes->uniq->sort}) . ')';
    }

    printf(" %-30s %4d-%02d - %4d-%02d  (%4d vehicles) %s\n",
           $pak->liveries->{$l}->name(),
           $pak->liveries->{$l}->intro_year(),
           $pak->liveries->{$l}->intro_month(),
           $pak->liveries->{$l}->retire_year(),
           $pak->liveries->{$l}->retire_month(),
           scalar @{$pak->liveries->{$l}->objects()},
           $ways,
       );
}



1;
