#!/usr/bin/env perl
use v5.26;
use feature 'signatures';
no warnings 'experimental';

use Getopt::Std;

our $VERSION = "0.20";

my %opts;

# -i <input file>
# -o <output file>
# -p <paksize>
# -x <crop single X offset>
# -y <crop single y offset>
# -M    list the hues of all (bright) mapcolors [7, 15, etc.]
# -v    verbose
# -n    dry run (use with -v to show diagnostics but not write file)
getopts('i:o:p:x:y:Mvn',\%opts);

use lib 'lib';
use Games::Simutrans::Image;

if ($opts{M}) {
    my %maphue;
    my $brightcolor = 7;
    while ($brightcolor <= 223) {
        $maphue{$brightcolor} = (Games::Simutrans::Image::mapcolor($brightcolor)->hsv)[0];
        $brightcolor += 8;
    }
    my @colorkeys = sort { $maphue{$::a} <=> $maphue{$::b} } keys %maphue;
    foreach my $c (@colorkeys) {
        print sprintf("   Mapcolor %3d Hue %3d\n", $c,$maphue{$c});
    }
    exit;
}

unless (defined $opts{i}) {
    die "must specify input file with -i";
}
unless (-e $opts{i}) {
    die "Cannot locate input file $opts{i}";
}
unless (defined $opts{o}) {
    die "Must specify output file with -o";
}
if ((defined $opts{x} || defined $opts{y}) && $opts{p} <= 0) {
    die "must specify paksize with -p";
}

my $image = Games::Simutrans::Image->new(file => $opts{i});
$image->read or die;

# NOTE: The tilesize is only needed when we crop by (x,y) tile
# coordinates.  For now we assume this is unknown, and force the user
# to define it, or blithely assume 128 size simply because the author
# of this module says so.
$image->tilesize( $opts{p} // 128);

$image->make_transparent;

if (defined $opts{x} && defined $opts{y}) {
    $image->image($image->image->copy->crop(left=>$opts{x}*$image->tilesize,
                                            top=>$opts{y}*$image->tilesize,
                                            width=>$image->tilesize,
                                            height=>$image->tilesize));
}

# Example of shearing the image to restore X-axis.
if (0) {
    use Imager::Matrix2d;
    my $m4 = Imager::Matrix2d->shear(y=>(1/2));
    $image->image($image->image->copy->matrix_transform(matrix=>$m4));
}

my @changes = split(',',$ARGV[0]);

# e.g., ./alter_hue -i INFILE -o OUTFILE 20+7-m100,40-180,60-p
#
# changes hue 20 ± 7 to hue of mapcolor 100,
# hue 40 ± 10 [using the default 10] to hue 180,
# and hue 60 ± 10 to special player colors.
#
# OR color map can be:   p-m70,a-m25
# 
# changes Player color gradation to correspond to range containing
# mapcolor 70 (i.e., 64..71) and Alternate color gradation to mapcolor
# 25 (i.e., 24..31).

foreach my $change (@changes) {

    my ($from_hue, $from_hue_threshold, $to_hue, $force_sat, $level_offset) =
    $change =~ /(\d+|p|a)(?:\+(\d+))?(?:\-(p|a|m?\d+)(:\d*)?(?:L([+\-]?[0-9.]*))?)?/i;

    $from_hue_threshold //= 10;

    my $map_color;
    if ($to_hue =~ /m(\d+)/) {
        $map_color = $1;
        $to_hue = (Games::Simutrans::Image::mapcolor($map_color)->hsv)[0];
        if ($force_sat =~ /^:\z/) {
            $force_sat = ':' . (Games::Simutrans::Image::>mapcolor($map_color)->hsv)[1] * 100;
            # New saturation in percent
        }
    }
    $force_sat = ($force_sat =~ /(\d+)/) ? ($1 / 100) : undef; # Saturation as percentage, or undef
    $level_offset = ($level_offset =~ /(-?\d+)/) ? ($1 / 100) : undef; # Level offset likewise
    if (defined $map_color && defined $force_sat) {
        undef $map_color;  # Compute destination colors rather than using predefined values
    }

    # In some cases previously we always replaced the saturation when replacing to a map color.
    # Now we seperately decide whether to do so.

    if ($from_hue =~ /^[a-z]/i) {
        if ($opts{v}) {
            print "($from_hue->";
            print (defined $map_color ? "mapcolor $map_color" : "hue $to_hue");
            print " with saturation $force_sat" if defined $force_sat;
            print ")\n";
        }
        $image->image($image->change_from_player_colors({ colortype => ($from_hue =~ /^a/i) ? 'alt': 'std',
                                                          hue => defined $map_color ? undef : $to_hue,
                                                          mapcolor => $map_color,
                                                          sat => $force_sat }));
    } elsif ($to_hue eq 'p') {
        print " change $from_hue(±$from_hue_threshold) to PLAYER color\n" if $opts{v};
        print ' (with offset level ' . $level_offset*100 ."%)\n" if ($opts{v} && defined $level_offset);
        $image->image($image->change_to_player_colors ( { colortype => 'std',
                                                          hue => $from_hue,
                                                          hue_threshold => $from_hue_threshold,
                                                          level_offset => $level_offset } ));
    } elsif ($to_hue eq 'a') {
        print " change $from_hue(±$from_hue_threshold) to ALTERNATE color\n" if $opts{v};
        print ' (with offset level ' . $level_offset*100 ."%)\n" if ($opts{v} && defined $level_offset);
        $image->image($image->change_to_player_colors ( { colortype => 'alt',
                                                          hue => $from_hue,
                                                          hue_threshold => $from_hue_threshold,
                                                          level_offset => $level_offset } ));
    } else {
        if (defined $force_sat) {
            next unless defined $to_hue;
            print "($from_hue(±$from_hue_threshold)->$to_hue with saturation $force_sat)\n" if $opts{v};
            $image->image($image->replace_hue_sat({
                from_hue => $from_hue,
                from_hue_thresh => $from_hue_threshold,
                new_hue => $to_hue,
                new_sat => $force_sat,
            }));
        } else {
            next unless defined $to_hue;
            print "($from_hue(±$from_hue_threshold)->$to_hue)\n" if $opts{v};
            $image->image($image->replace_hue({
                from_hue => $from_hue,
                from_hue_thresh => $from_hue_threshold,
                new_hue => $to_hue,
            }));
        }
    }
}

$image->write($opts{o}) unless $opts{n};

# TODO:
#  - Combine multi-tile images into one
#  - Break images like TileCutter?
#  -

