#!/usr/bin/env perl
use v5.26;
use feature 'signatures';
no warnings 'experimental';

use Getopt::Std;

use Imager;

my %opts;

# -i <input file>
# -o <output file>
# -h <hue> or -h <hue>,<hue>,...
# -H <hue threshold>
# -n <new hue>
# -m <mapcolor[s] to select new hue>
### -s <saturation>
### -S <saturation threshold>
# -p <paksize>
# -x <crop single X offset>
# -y <crop single y offset>
# -P    replace with player color
# -A    replace with alternate player color
getopt('i:o:h:H:n:m:p:x:y:PA',\%opts);
# perhaps later, s:S:

unless (defined $opts{i}) {
    die "must specify input file with -i";
}
unless (-e $opts{i}) {
    die "Cannot locate input file $opts{i}";
}
unless (defined $opts{o}) {
    die "Must specify output file with -o";
}
if ((defined $opts{x} || defined $opts{y}) && $opts{p} <= 0) {
    die "must specify paksize with -p";
}
unless (defined $opts{h} && defined $opts{H}) { # && defined $opts{s} && defined $opts{S}) {
    die "Must specify -h hue -H hue_threshold";  # ..." -s saturation -S saturation_threshold";
}
unless (defined $opts{n} || defined $opts{m}) {
    die "Must specify new hew with -n hue or -m mapcolor";
}

my @mapcolor_rgb = (   # from simgraph16.cc
	36, 75, 103,
	57, 94, 124,
	76, 113, 145,
	96, 132, 167,
	116, 151, 189,
	136, 171, 211,
	156, 190, 233,
	176, 210, 255,
	88, 88, 88,
	107, 107, 107,
	125, 125, 125,
	144, 144, 144,
	162, 162, 162,
	181, 181, 181,
	200, 200, 200,
	219, 219, 219,
	17, 55, 133,
	27, 71, 150,
	37, 86, 167,
	48, 102, 185,
	58, 117, 202,
	69, 133, 220,
	79, 149, 237,
	90, 165, 255,
	123, 88, 3,
	142, 111, 4,
	161, 134, 5,
	180, 157, 7,
	198, 180, 8,
	217, 203, 10,
	236, 226, 11,
	255, 249, 13,
	86, 32, 14,
	110, 40, 16,
	134, 48, 18,
	158, 57, 20,
	182, 65, 22,
	206, 74, 24,
	230, 82, 26,
	255, 91, 28,
	34, 59, 10,
	44, 80, 14,
	53, 101, 18,
	63, 122, 22,
	77, 143, 29,
	92, 164, 37,
	106, 185, 44,
	121, 207, 52,
	0, 86, 78,
	0, 108, 98,
	0, 130, 118,
	0, 152, 138,
	0, 174, 158,
	0, 196, 178,
	0, 218, 198,
	0, 241, 219,
	74, 7, 122,
	95, 21, 139,
	116, 37, 156,
	138, 53, 173,
	160, 69, 191,
	181, 85, 208,
	203, 101, 225,
	225, 117, 243,
	59, 41, 0,
	83, 55, 0,
	107, 69, 0,
	131, 84, 0,
	155, 98, 0,
	179, 113, 0,
	203, 128, 0,
	227, 143, 0,
	87, 0, 43,
	111, 11, 69,
	135, 28, 92,
	159, 45, 115,
	183, 62, 138,
	230, 74, 174,
	245, 121, 194,
	255, 156, 209,
	20, 48, 10,
	44, 74, 28,
	68, 99, 45,
	93, 124, 62,
	118, 149, 79,
	143, 174, 96,
	168, 199, 113,
	193, 225, 130,
	54, 19, 29,
	82, 44, 44,
	110, 69, 58,
	139, 95, 72,
	168, 121, 86,
	197, 147, 101,
	226, 173, 115,
	255, 199, 130,
	8, 11, 100,
	14, 22, 116,
	20, 33, 139,
	26, 44, 162,
	41, 74, 185,
	57, 104, 208,
	76, 132, 231,
	96, 160, 255,
	43, 30, 46,
	68, 50, 85,
	93, 70, 110,
	118, 91, 130,
	143, 111, 170,
	168, 132, 190,
	193, 153, 210,
	219, 174, 230,
	63, 18, 12,
	90, 38, 30,
	117, 58, 42,
	145, 78, 55,
	172, 98, 67,
	200, 118, 80,
	227, 138, 92,
	255, 159, 105,
	11, 68, 30,
	33, 94, 56,
	54, 120, 81,
	76, 147, 106,
	98, 174, 131,
	120, 201, 156,
	142, 228, 181,
	164, 255, 207,
	64, 0, 0,
	96, 0, 0,
	128, 0, 0,
	192, 0, 0,
	255, 0, 0,
	255, 64, 64,
	255, 96, 96,
	255, 128, 128,
	0, 128, 0,
	0, 196, 0,
	0, 225, 0,
	0, 240, 0,
	0, 255, 0,
	64, 255, 64,
	94, 255, 94,
	128, 255, 128,
	0, 0, 128,
	0, 0, 192,
	0, 0, 224,
	0, 0, 255,
	0, 64, 255,
	0, 94, 255,
	0, 106, 255,
	0, 128, 255,
	128, 64, 0,
	193, 97, 0,
	215, 107, 0,
	255, 128, 0,
	255, 128, 0,
	255, 149, 43,
	255, 170, 85,
	255, 193, 132,
	8, 52, 0,
	16, 64, 0,
	32, 80, 4,
	48, 96, 4,
	64, 112, 12,
	84, 132, 20,
	104, 148, 28,
	128, 168, 44,
	164, 164, 0,
	193, 193, 0,
	215, 215, 0,
	255, 255, 0,
	255, 255, 32,
	255, 255, 64,
	255, 255, 128,
	255, 255, 172,
	32, 4, 0,
	64, 20, 8,
	84, 28, 16,
	108, 44, 28,
	128, 56, 40,
	148, 72, 56,
	168, 92, 76,
	184, 108, 88,
	64, 0, 0,
	96, 8, 0,
	112, 16, 0,
	120, 32, 8,
	138, 64, 16,
	156, 72, 32,
	174, 96, 48,
	192, 128, 64,
	32, 32, 0,
	64, 64, 0,
	96, 96, 0,
	128, 128, 0,
	144, 144, 0,
	172, 172, 0,
	192, 192, 0,
	224, 224, 0,
	64, 96, 8,
	80, 108, 32,
	96, 120, 48,
	112, 144, 56,
	128, 172, 64,
	150, 210, 68,
	172, 238, 80,
	192, 255, 96,
	32, 32, 32,
	48, 48, 48,
	64, 64, 64,
	80, 80, 80,
	96, 96, 96,
	172, 172, 172,
	236, 236, 236,
	255, 255, 255,
	41, 41, 54,
	60, 45, 70,
	75, 62, 108,
	95, 77, 136,
	113, 105, 150,
	135, 120, 176,
	165, 145, 218,
	198, 191, 232,
    );

my @mapcolor;

while (scalar @mapcolor_rgb) {
    push @mapcolor, Imager::Color->new(shift @mapcolor_rgb, shift @mapcolor_rgb, shift @mapcolor_rgb);
}

my $ii = Imager->new;
$ii->read(file => $opts{i}) or die;
# Example:
# $ii->getwidth = 1024
# $ii->getchannels = 3
# $ii->bits = 8
my $newimg=$ii->copy;
my $paksize = $opts{p}; # 128;
# NOTE: Compute $paksize from actual image size $ii->getwidth, $ii->getheight and the maximum
# image (x,y) used within it
if (defined $opts{x} && defined $opts{y}) {
    $newimg=$ii->crop(left=>$opts{x}*$paksize,top=>$opts{y}*$paksize,width=>$paksize,height=>$paksize);
}

# NOTE: $newimg->getpixel(x=>0,y=>0) =
#0  Imager::Color=SCALAR(0x55af775a06e8)
#   -> 94212113949408
# NOTE: $newimg->getpixel(x=>0,y=>0)->rgba =
# 0  231
# 1  255
# 2  255
# 3  0
# which is the Heritage Transparent color
my $timg=Imager->new(xsize=>$newimg->getwidth, ysize=>$newimg->getheight, channels=>$ii->getchannels);
$timg->box(filled=>1, color=>Imager::Color->new(231,255,255));
my $oimg=$timg->difference(other=>$newimg);

# Example of shearing the image to restore X-axis.
if (0) {
    use Imager::Matrix2d;
    my $m4 = Imager::Matrix2d->shear(y=>(1/2));
    $oimg = $oimg->matrix_transform(matrix=>$m4);
}

sub replace_color ($img, $constants) {
    # Inspired by http://www.perlmonks.org/?node_id=497355

    my $rpnexpr = <<'EOS';
x y getp1 !pix
@pix hue !phue @phue from_hue from_hue_thresh + lt @phue from_hue from_hue_thresh - gt and new_hue @phue if
@pix sat
@pix value
@pix alpha
hsva
EOS

    # @pix hue !phue
    # !phue @phue @from_hue == @new_hue @phue ifp
    #  @from_hue == @new_hue @phue ifp


    # to_red to_green to_blue to_alpha rgba @pix ifp

    my %constants;
    # Load values via hash slices
    # @constants{map {"from_$_"} qw{red green blue alpha}} = $from_color->rgba;
    # @constants{map {"to_$_"  } qw{red green blue alpha}} = $to_color  ->rgba;

    return Imager::transform2({ rpnexpr => $rpnexpr,
                                constants => $constants,
                                channels => 4},
                              $img);
}

sub replace_color_range ($img, $constants) {

    my $rpnexpr = <<'EOS';
x y getp1 !pix
@pix hue !phue
@pix value !pval

@phue from_hue from_hue_thresh + lt @phue from_hue from_hue_thresh - gt and
@pval from_value from_value_thresh + lt @pval from_value from_value_thresh - gt and
and
rr gg bb rgb @pix if

EOS

    $constants->@{qw(rr gg bb aa)}=Imager::Color->new(web=>$constants->{to_color})->rgba;

    return Imager::transform2({ rpnexpr => $rpnexpr,
                                constants => $constants,
                                channels => 4},
                              $img);
}


# Example of changing hue
if ($opts{P} || $opts{A}) {
    my $player_colors = {std => ['#244b67', '#395e7c', '#4c7191', '#608a47', '#7497bd', '#88abd3', '#9cbee9', '#b0d2ff'],
                         alt => ['#7b5803', '#8e6f04', '#a18605', '#b49d07', '#c6b408', '#d9cb0a', '#ece20b', '#fff90d']};

    foreach my $value (1..7) {
        # Replace gradations of values of the given hue, with special player colors
        my $v = ($value / 8) + (1/16);
        my $v_threshold = 1/16;
        $oimg = replace_color_range($oimg, {
            from_hue => $opts{h},
            from_hue_thresh => $opts{H},
            from_value => $v,
            from_value_thresh => $v_threshold,
            to_color => $player_colors->{$opts{P} ? 'std':'alt'}->[$value]
        });
    }
} else {

    if (defined $opts{m}) {
        my @from_mapcolors = split(',',$opts{m}); # one or more
        my @to_hues;
        foreach my $m (@from_mapcolors) {
            $DB::single = 1;
            push @to_hues, ($mapcolor[$m]->hsv)[0];
        }
        $opts{n} = join(',',@to_hues);
        print "New hues from mapcolors: $opts{n}\n";
    }

    if ($opts{h} =~ /,/) {
        my @from_hues = split(',',$opts{h});
        my @to_hues = split(',',$opts{n});
        my $to_hue;
        foreach my $from_hue (@from_hues) {
            $to_hue = shift @to_hues // $to_hue;
            print "($from_hue->$to_hue) ";
            $oimg = replace_color($oimg, {
                from_hue => $from_hue,
                from_hue_thresh => $opts{H},
                new_hue => $to_hue
            });
        }
    } else {
        $oimg = replace_color($oimg, {
            from_hue => $opts{h},
            from_hue_thresh => $opts{H},
            new_hue => $opts{n}
        });
    }
}

$oimg->write(file=>$opts{o});

# TODO:
#  - Combine multi-tile images into one
#  - Break images like TileCutter?
#  -

