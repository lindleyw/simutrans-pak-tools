#!/usr/bin/env perl
use v5.26;
use feature 'signatures';
no warnings 'experimental';

use Getopt::Std;

use Imager;

our $VERSION = "0.17";

my %opts;

# -i <input file>
# -o <output file>
# -p <paksize>
# -x <crop single X offset>
# -y <crop single y offset>
# -M    list the hues of all (bright) mapcolors [7, 15, etc.]
# -v    verbose
getopts('i:o:p:x:y:Mv',\%opts);

my @mapcolor_rgb = (   # from simgraph16.cc
	36, 75, 103,
	57, 94, 124,
	76, 113, 145,
	96, 132, 167,
	116, 151, 189,
	136, 171, 211,
	156, 190, 233,
	176, 210, 255,
	88, 88, 88,
	107, 107, 107,
	125, 125, 125,
	144, 144, 144,
	162, 162, 162,
	181, 181, 181,
	200, 200, 200,
	219, 219, 219,
	17, 55, 133,
	27, 71, 150,
	37, 86, 167,
	48, 102, 185,
	58, 117, 202,
	69, 133, 220,
	79, 149, 237,
	90, 165, 255,
	123, 88, 3,
	142, 111, 4,
	161, 134, 5,
	180, 157, 7,
	198, 180, 8,
	217, 203, 10,
	236, 226, 11,
	255, 249, 13,
	86, 32, 14,
	110, 40, 16,
	134, 48, 18,
	158, 57, 20,
	182, 65, 22,
	206, 74, 24,
	230, 82, 26,
	255, 91, 28,
	34, 59, 10,
	44, 80, 14,
	53, 101, 18,
	63, 122, 22,
	77, 143, 29,
	92, 164, 37,
	106, 185, 44,
	121, 207, 52,
	0, 86, 78,
	0, 108, 98,
	0, 130, 118,
	0, 152, 138,
	0, 174, 158,
	0, 196, 178,
	0, 218, 198,
	0, 241, 219,
	74, 7, 122,
	95, 21, 139,
	116, 37, 156,
	138, 53, 173,
	160, 69, 191,
	181, 85, 208,
	203, 101, 225,
	225, 117, 243,
	59, 41, 0,
	83, 55, 0,
	107, 69, 0,
	131, 84, 0,
	155, 98, 0,
	179, 113, 0,
	203, 128, 0,
	227, 143, 0,
	87, 0, 43,
	111, 11, 69,
	135, 28, 92,
	159, 45, 115,
	183, 62, 138,
	230, 74, 174,
	245, 121, 194,
	255, 156, 209,
	20, 48, 10,
	44, 74, 28,
	68, 99, 45,
	93, 124, 62,
	118, 149, 79,
	143, 174, 96,
	168, 199, 113,
	193, 225, 130,
	54, 19, 29,
	82, 44, 44,
	110, 69, 58,
	139, 95, 72,
	168, 121, 86,
	197, 147, 101,
	226, 173, 115,
	255, 199, 130,
	8, 11, 100,
	14, 22, 116,
	20, 33, 139,
	26, 44, 162,
	41, 74, 185,
	57, 104, 208,
	76, 132, 231,
	96, 160, 255,
	43, 30, 46,
	68, 50, 85,
	93, 70, 110,
	118, 91, 130,
	143, 111, 170,
	168, 132, 190,
	193, 153, 210,
	219, 174, 230,
	63, 18, 12,
	90, 38, 30,
	117, 58, 42,
	145, 78, 55,
	172, 98, 67,
	200, 118, 80,
	227, 138, 92,
	255, 159, 105,
	11, 68, 30,
	33, 94, 56,
	54, 120, 81,
	76, 147, 106,
	98, 174, 131,
	120, 201, 156,
	142, 228, 181,
	164, 255, 207,
	64, 0, 0,
	96, 0, 0,
	128, 0, 0,
	192, 0, 0,
	255, 0, 0,
	255, 64, 64,
	255, 96, 96,
	255, 128, 128,
	0, 128, 0,
	0, 196, 0,
	0, 225, 0,
	0, 240, 0,
	0, 255, 0,
	64, 255, 64,
	94, 255, 94,
	128, 255, 128,
	0, 0, 128,
	0, 0, 192,
	0, 0, 224,
	0, 0, 255,
	0, 64, 255,
	0, 94, 255,
	0, 106, 255,
	0, 128, 255,
	128, 64, 0,
	193, 97, 0,
	215, 107, 0,
	255, 128, 0,
	255, 128, 0,
	255, 149, 43,
	255, 170, 85,
	255, 193, 132,
	8, 52, 0,
	16, 64, 0,
	32, 80, 4,
	48, 96, 4,
	64, 112, 12,
	84, 132, 20,
	104, 148, 28,
	128, 168, 44,
	164, 164, 0,
	193, 193, 0,
	215, 215, 0,
	255, 255, 0,
	255, 255, 32,
	255, 255, 64,
	255, 255, 128,
	255, 255, 172,
	32, 4, 0,
	64, 20, 8,
	84, 28, 16,
	108, 44, 28,
	128, 56, 40,
	148, 72, 56,
	168, 92, 76,
	184, 108, 88,
	64, 0, 0,
	96, 8, 0,
	112, 16, 0,
	120, 32, 8,
	138, 64, 16,
	156, 72, 32,
	174, 96, 48,
	192, 128, 64,
	32, 32, 0,
	64, 64, 0,
	96, 96, 0,
	128, 128, 0,
	144, 144, 0,
	172, 172, 0,
	192, 192, 0,
	224, 224, 0,
	64, 96, 8,
	80, 108, 32,
	96, 120, 48,
	112, 144, 56,
	128, 172, 64,
	150, 210, 68,
	172, 238, 80,
	192, 255, 96,
	32, 32, 32,
	48, 48, 48,
	64, 64, 64,
	80, 80, 80,
	96, 96, 96,
	172, 172, 172,
	236, 236, 236,
	255, 255, 255,
	41, 41, 54,
	60, 45, 70,
	75, 62, 108,
	95, 77, 136,
	113, 105, 150,
	135, 120, 176,
	165, 145, 218,
	198, 191, 232,
    );

my @mapcolor;

while (scalar @mapcolor_rgb) {
    push @mapcolor, Imager::Color->new(shift @mapcolor_rgb, shift @mapcolor_rgb, shift @mapcolor_rgb);
}

if ($opts{M}) {
    my %maphue;
    my $brightcolor = 7;
    while ($brightcolor <= 223) {
        $maphue{$brightcolor} = ($mapcolor[$brightcolor]->hsv)[0];
        $brightcolor += 8;
    }
    my @colorkeys = sort { $maphue{$::a} <=> $maphue{$::b} } keys %maphue;
    foreach my $c (@colorkeys) {
        print sprintf("   Mapcolor %3d Hue %3d\n", $c,$maphue{$c});
    }
    exit;
}

unless (defined $opts{i}) {
    die "must specify input file with -i";
}
unless (-e $opts{i}) {
    die "Cannot locate input file $opts{i}";
}
unless (defined $opts{o}) {
    die "Must specify output file with -o";
}
if ((defined $opts{x} || defined $opts{y}) && $opts{p} <= 0) {
    die "must specify paksize with -p";
}

my $ii = Imager->new;
$ii->read(file => $opts{i}) or die;
# Example:
# $ii->getwidth = 1024
# $ii->getchannels = 3
# $ii->bits = 8
my $newimg=$ii->copy;
my $paksize = $opts{p}; # 128;
# NOTE: Compute $paksize from actual image size $ii->getwidth, $ii->getheight and the maximum
# image (x,y) used within it
if (defined $opts{x} && defined $opts{y}) {
    $newimg=$ii->crop(left=>$opts{x}*$paksize,top=>$opts{y}*$paksize,width=>$paksize,height=>$paksize);
}

# NOTE: $newimg->getpixel(x=>0,y=>0) =
#0  Imager::Color=SCALAR(0x55af775a06e8)
#   -> 94212113949408
# NOTE: $newimg->getpixel(x=>0,y=>0)->rgba =
# 0  231
# 1  255
# 2  255
# 3  0
# which is the Heritage Transparent color
my $timg=Imager->new(xsize=>$newimg->getwidth, ysize=>$newimg->getheight, channels=>$ii->getchannels);
$timg->box(filled=>1, color=>Imager::Color->new(231,255,255));
my $oimg=$timg->difference(other=>$newimg);

# Example of shearing the image to restore X-axis.
if (0) {
    use Imager::Matrix2d;
    my $m4 = Imager::Matrix2d->shear(y=>(1/2));
    $oimg = $oimg->matrix_transform(matrix=>$m4);
}

sub replace_rgb ($img, $constants) {
    # Replace one (r,g,b) with another
    # Inspired by little program by Tony Cook (tonyc),
    # http://www.perlmonks.org/?node_id=497355

    my $rpnexpr = <<'EOS';
x y getp1 !pix
@pix red !pred @pred from_red eq
@pix green !pgreen @pgreen from_green eq and
@pix blue !pblue @pblue from_blue eq and !match
@match rr @pred if
@match gg @pgreen if
@match bb @pblue if
@pix alpha
rgba
EOS

    $constants->@{qw(from_red from_green from_blue from_alpha)}=$constants->{from_color}->rgba;
    $constants->@{qw(rr gg bb aa)}=$constants->{to_color}->rgba;

    return Imager::transform2({ rpnexpr => $rpnexpr,
                                constants => $constants,
                                channels => 4},
                              $img);
}

sub replace_hue ($img, $constants) {

    my $rpnexpr = <<'EOS';
x y getp1 !pix
@pix hue !phue @phue from_hue from_hue_thresh + lt @phue from_hue from_hue_thresh - gt and new_hue @phue if
@pix sat
@pix value
@pix alpha
hsva
EOS

    return Imager::transform2({ rpnexpr => $rpnexpr,
                                constants => $constants,
                                channels => 4},
                              $img);
}

sub replace_hue_sat ($img, $constants) {

    my $rpnexpr = <<'EOS';
x y getp1 !pix
@pix hue !phue @phue from_hue from_hue_thresh + lt @phue from_hue from_hue_thresh - gt and !match
@match new_hue @phue if
@match new_sat @pix sat if
@pix value
@pix alpha
hsva
EOS

    return Imager::transform2({ rpnexpr => $rpnexpr,
                                constants => $constants,
                                channels => 4},
                              $img);
}

sub replace_color_range ($img, $constants) {

    my $rpnexpr = <<'EOS';
x y getp1 !pix
@pix hue !phue
@pix value !pval

@phue from_hue from_hue_thresh + le @phue from_hue from_hue_thresh - ge and
@pval from_value from_value_thresh + le @pval from_value from_value_thresh - ge and
@pix sat 0.15 gt @pix value 0.15 gt and
and and
rr gg bb rgb @pix if

EOS

    $constants->@{qw(rr gg bb aa)}=Imager::Color->new(web=>$constants->{to_color})->rgba;

    return Imager::transform2({ rpnexpr => $rpnexpr,
                                constants => $constants,
                                channels => 4},
                              $img);
}

{
    my $player_colors = {std => ['#244b67', '#395e7c', '#4c7191', '#6084a7', '#7497bd', '#88abd3', '#9cbee9', '#b0d2ff'],
                         alt => ['#7b5803', '#8e6f04', '#a18605', '#b49d07', '#c6b408', '#d9cb0a', '#ece20b', '#fff90d']};

    sub change_to_player_color {
        my ($img, $colortype, $value, $opts) = @_;
        # $colortype should be 'std' or 'alt' for standard / alternate player color
        # $value should be 0..7 for the level

        return replace_color_range($img, {%{$opts}, to_color => $player_colors->{$colortype}->[$value]});
    }

    sub change_from_player_color {

        my ($img, $colortype, $value, $opts) = @_;
        # $colortype should be 'std' or 'alt' for standard / alternate player color
        # $value should be 0..7 for the level

        return replace_rgb($img, {%{$opts},
                                  from_color => Imager::Color->new(web =>
                                                                   $player_colors->{$colortype}->[$value]),
                              },
                       );

    }

}

sub change_to_player_colors {
    my ($img, $colortype, $hue, $hue_threshold, $level_offset) = @_;

    my $levels = 8;  # perhaps later, scalar ... of the array size
    $level_offset //= 0.1;                     # By default, do not modify values very near black
    my $v_threshold = (1-$level_offset)/($levels*2);            # for levels=2, this is 1/4
    # print "\nTHRESH: HUE=$hue_threshold, VALUE=$v_threshold ";
    foreach my $value ( 0 .. $levels - 1 ) {    # skipping 0 so black does not get modified!
        # Replace gradations of values of the given hue, with special player colors
        my $v = ($value * (1 - $level_offset) / $levels) + $level_offset + $v_threshold;  # for levels=2, this will be 1/4 and then 3/4.
        # print "($v) ";
        $img = change_to_player_color($img, $colortype, $value, {
            from_hue => $hue,
            from_hue_thresh => $hue_threshold,
            from_value => $v,
            from_value_thresh => $v_threshold,
        });
    }
    return $img;
}

sub change_from_player_colors {
    # Replace a set of eight player colors to gradations of the given hue.
    # Replacement could be a hue or a mapcolor.
    my ($img, $colortype, $hue, $mapcolor, $saturation) = @_;
    my @to_colors;
    if (defined $mapcolor) {
        # use mapcolor scale
        my $start_mapcolor = $mapcolor & 0xf8; # mask off bottom 3 bits
        for my $i (0..7) {
            push @to_colors, $mapcolor[$start_mapcolor + $i];
        }
    } else {
        # TODO:
        # calculate an array of output colors based on fixed hue and varying lightness/saturation ...(how exactly?)
        $saturation //= 1;   # Saturation given as 0..1
        for my $i (0..7) {
            push @to_colors, Imager::Color->new( hue => $hue, s => $saturation , v => ($i+1) /  8 );
        }
    }
    for my $i (0 .. scalar @to_colors - 1) {
        $img = change_from_player_color($img, $colortype, $i, { to_color => $to_colors[$i] } );
    }
    return $img;
}

sub overlay {
    # $img->rubthrough(src=>$overlay,
    #              tx=>30,       ty=>50,
    #              src_minx=>20, src_miny=>30,
    #              src_maxx=>20, src_maxy=>30);
}


my @changes = split(',',$ARGV[0]);

# e.g., ./alter_hue -i INFILE -o OUTFILE 20+7-m100,40-180,60-p
#
# changes hue 20 ± 7 to hue of mapcolor 100,
# hue 40 ± 10 [using the default 10] to hue 180,
# and hue 60 ± 10 to special player colors.
#
# OR color map can be:   p-m70,a-m25
# 
# changes Player color gradation to correspond to range containing
# mapcolor 70 (i.e., 64..71) and Alternate color gradation to mapcolor
# 25 (i.e., 24..31).

foreach my $change (@changes) {

    my ($from_hue, $from_hue_threshold, $to_hue, $force_sat, $level_offset) =
    $change =~ /(\d+|p|a)(?:\+(\d+))?(?:\-(p|a|m?\d+)(:\d*)?(?:L([+\-]?[0-9.]*))?)?/i;

    $from_hue_threshold //= 10;

    my $map_color;
    if ($to_hue =~ /m(\d+)/) {
        print "  TO_HUE: map color $1\n" if $opts{v};
        $map_color = $1;
        $to_hue = ($mapcolor[$map_color]->hsv)[0];
        if ($force_sat =~ /^:\z/) {
            $force_sat = ':' . ($mapcolor[$map_color]->hsv)[1] * 100; # New saturation in percent
        }
    }
    $force_sat = ($force_sat =~ /(\d+)/) ? ($1 / 100) : undef; # Saturation as percentage, or undef
    $level_offset = ($level_offset =~ /(-?\d+)/) ? ($1 / 100) : undef; # Level offset likewise
    if (defined $map_color && defined $force_sat) {
        undef $map_color;  # Compute destination colors rather than using predefined values
    }

    # In some cases previously we always replaced the saturation when replacing to a map color.
    # Now we seperately decide whether to do so.

    if ($from_hue =~ /^[a-z]/i) {
        print "($from_hue->$to_hue with saturation $force_sat)\n" if $opts{v};
        $oimg = change_from_player_colors($oimg, ($from_hue =~ /^a/i) ? 'alt': 'std', defined $map_color ? undef : $to_hue, $map_color, $force_sat);
    } elsif ($to_hue eq 'p') {
        print " change $from_hue(±$from_hue_threshold) to PLAYER color\n" if $opts{v};
        print ' (with offset level ' . $level_offset*100 ."%)\n" if ($opts{v} && defined $level_offset);
        $oimg = change_to_player_colors ($oimg, 'std', $from_hue, $from_hue_threshold, $level_offset);
    } elsif ($to_hue eq 'a') {
        print " change $from_hue(±$from_hue_threshold) to ALTERNATE color\n" if $opts{v};
        print ' (with offset level ' . $level_offset*100 ."%)\n" if ($opts{v} && defined $level_offset);
        $oimg = change_to_player_colors ($oimg, 'alt', $from_hue, $from_hue_threshold, $level_offset);
    } else {
        if (defined $force_sat) {
            print "($from_hue(±$from_hue_threshold)->$to_hue with saturation $force_sat)\n" if $opts{v};
            $oimg = replace_hue_sat($oimg, {
                from_hue => $from_hue,
                from_hue_thresh => $from_hue_threshold,
                new_hue => $to_hue,
                new_sat => $force_sat,
            });
        } else {
            print "($from_hue(±$from_hue_threshold)->$to_hue)\n" if $opts{v};
            $oimg = replace_hue($oimg, {
                from_hue => $from_hue,
                from_hue_thresh => $from_hue_threshold,
                new_hue => $to_hue,
            });
        }
    }
}

$oimg->write(file=>$opts{o});

# TODO:
#  - Combine multi-tile images into one
#  - Break images like TileCutter?
#  -

